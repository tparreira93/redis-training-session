services:
  redis-7001:
    image: redis:7-alpine
    container_name: redis-7001
    command: >
      sh -c "redis-server
      --port 7001
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
      --cluster-announce-hostname redis-7001
      --cluster-announce-port 7001
      --cluster-announce-bus-port 17001"
    ports:
      - "7001:7001"
      - "17001:17001"
    volumes:
      - redis-7001-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7001", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  redis-7002:
    image: redis:7-alpine
    container_name: redis-7002
    command: >
      sh -c "redis-server
      --port 7002
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
      --cluster-announce-hostname redis-7002
      --cluster-announce-port 7002
      --cluster-announce-bus-port 17002"
    ports:
      - "7002:7002"
      - "17002:17002"
    volumes:
      - redis-7002-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7002", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  redis-7003:
    image: redis:7-alpine
    container_name: redis-7003
    command: >
      sh -c "redis-server
      --port 7003
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
      --cluster-announce-hostname redis-7003
      --cluster-announce-port 7003
      --cluster-announce-bus-port 17003"
    ports:
      - "7003:7003"
      - "17003:17003"
    volumes:
      - redis-7003-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7003", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  redis-7004:
    image: redis:7-alpine
    container_name: redis-7004
    command: >
      sh -c "redis-server
      --port 7004
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
      --cluster-announce-hostname redis-7004
      --cluster-announce-port 7004
      --cluster-announce-bus-port 17004"
    ports:
      - "7004:7004"
      - "17004:17004"
    volumes:
      - redis-7004-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7004", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  redis-7005:
    image: redis:7-alpine
    container_name: redis-7005
    command: >
      sh -c "redis-server
      --port 7005
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
      --cluster-announce-hostname redis-7005
      --cluster-announce-port 7005
      --cluster-announce-bus-port 17005"
    ports:
      - "7005:7005"
      - "17005:17005"
    volumes:
      - redis-7005-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7005", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  redis-7006:
    image: redis:7-alpine
    container_name: redis-7006
    command: >
      sh -c "redis-server
      --port 7006
      --cluster-enabled yes
      --cluster-config-file nodes.conf
      --cluster-node-timeout 5000
      --appendonly yes
      --protected-mode no
      --bind 0.0.0.0
      --cluster-announce-hostname redis-7006
      --cluster-announce-port 7006
      --cluster-announce-bus-port 17006"
    ports:
      - "7006:7006"
      - "17006:17006"
    volumes:
      - redis-7006-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "7006", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s

  redis-cluster-init:
    image: redis:7-alpine
    container_name: redis-cluster-init
    depends_on:
      redis-7001:
        condition: service_healthy
      redis-7002:
        condition: service_healthy
      redis-7003:
        condition: service_healthy
      redis-7004:
        condition: service_healthy
      redis-7005:
        condition: service_healthy
      redis-7006:
        condition: service_healthy
    command: >
      sh -c '
        echo "ðŸš€ Initializing Redis Cluster..."
        sleep 5
        
        echo "âœ… Checking if cluster already exists..."
        CLUSTER_INFO=$(redis-cli -h redis-7001 -p 7001 cluster info 2>/dev/null || echo "cluster_state:fail")
        CLUSTER_STATE=$(echo "$CLUSTER_INFO" | grep cluster_state | cut -d: -f2)
        SLOTS_ASSIGNED=$(echo "$CLUSTER_INFO" | grep cluster_slots_assigned | cut -d: -f2)
        
        if [ "$CLUSTER_STATE" = "ok" ] && [ "$SLOTS_ASSIGNED" = "16384" ]; then
          echo "âœ… Cluster already properly configured!"
        else
          echo "ðŸ”§ Cluster needs initialization..."
          
          # Simple cluster creation using hostnames
          redis-cli --cluster create \
            redis-7001:7001 \
            redis-7002:7002 \
            redis-7003:7003 \
            redis-7004:7004 \
            redis-7005:7005 \
            redis-7006:7006 \
            --cluster-replicas 1 \
            --cluster-yes
          
          echo "âœ… Cluster initialized successfully!"
        fi
        
        echo "ðŸ“Š Final cluster status:"
        redis-cli -h redis-7001 -p 7001 cluster info | grep -E "cluster_state|cluster_slots_assigned|cluster_known_nodes"
        redis-cli -h redis-7001 -p 7001 cluster nodes | head -6
      '
    restart: "no"

volumes:
  redis-7001-data:
  redis-7002-data:
  redis-7003-data:
  redis-7004-data:
  redis-7005-data:
  redis-7006-data:
